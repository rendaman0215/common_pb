// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: query/v1/query.proto

package queryv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CategoryQueryService_List_FullMethodName = "/query.v1.CategoryQueryService/List"
	CategoryQueryService_ById_FullMethodName = "/query.v1.CategoryQueryService/ById"
)

// CategoryQueryServiceClient is the client API for CategoryQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CategoryQueryServiceClient interface {
	List(ctx context.Context, in *CategoryQueryServiceListRequest, opts ...grpc.CallOption) (*CategoryQueryServiceListResponse, error)
	ById(ctx context.Context, in *CategoryQueryServiceByIdRequest, opts ...grpc.CallOption) (*CategoryQueryServiceByIdResponse, error)
}

type categoryQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCategoryQueryServiceClient(cc grpc.ClientConnInterface) CategoryQueryServiceClient {
	return &categoryQueryServiceClient{cc}
}

func (c *categoryQueryServiceClient) List(ctx context.Context, in *CategoryQueryServiceListRequest, opts ...grpc.CallOption) (*CategoryQueryServiceListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CategoryQueryServiceListResponse)
	err := c.cc.Invoke(ctx, CategoryQueryService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryQueryServiceClient) ById(ctx context.Context, in *CategoryQueryServiceByIdRequest, opts ...grpc.CallOption) (*CategoryQueryServiceByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CategoryQueryServiceByIdResponse)
	err := c.cc.Invoke(ctx, CategoryQueryService_ById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CategoryQueryServiceServer is the server API for CategoryQueryService service.
// All implementations must embed UnimplementedCategoryQueryServiceServer
// for forward compatibility.
type CategoryQueryServiceServer interface {
	List(context.Context, *CategoryQueryServiceListRequest) (*CategoryQueryServiceListResponse, error)
	ById(context.Context, *CategoryQueryServiceByIdRequest) (*CategoryQueryServiceByIdResponse, error)
	mustEmbedUnimplementedCategoryQueryServiceServer()
}

// UnimplementedCategoryQueryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCategoryQueryServiceServer struct{}

func (UnimplementedCategoryQueryServiceServer) List(context.Context, *CategoryQueryServiceListRequest) (*CategoryQueryServiceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCategoryQueryServiceServer) ById(context.Context, *CategoryQueryServiceByIdRequest) (*CategoryQueryServiceByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ById not implemented")
}
func (UnimplementedCategoryQueryServiceServer) mustEmbedUnimplementedCategoryQueryServiceServer() {}
func (UnimplementedCategoryQueryServiceServer) testEmbeddedByValue()                              {}

// UnsafeCategoryQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CategoryQueryServiceServer will
// result in compilation errors.
type UnsafeCategoryQueryServiceServer interface {
	mustEmbedUnimplementedCategoryQueryServiceServer()
}

func RegisterCategoryQueryServiceServer(s grpc.ServiceRegistrar, srv CategoryQueryServiceServer) {
	// If the following call pancis, it indicates UnimplementedCategoryQueryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CategoryQueryService_ServiceDesc, srv)
}

func _CategoryQueryService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryQueryServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryQueryServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryQueryService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryQueryServiceServer).List(ctx, req.(*CategoryQueryServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryQueryService_ById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryQueryServiceByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryQueryServiceServer).ById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryQueryService_ById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryQueryServiceServer).ById(ctx, req.(*CategoryQueryServiceByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CategoryQueryService_ServiceDesc is the grpc.ServiceDesc for CategoryQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CategoryQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "query.v1.CategoryQueryService",
	HandlerType: (*CategoryQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _CategoryQueryService_List_Handler,
		},
		{
			MethodName: "ById",
			Handler:    _CategoryQueryService_ById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "query/v1/query.proto",
}

const (
	ProductQueryService_List_FullMethodName      = "/query.v1.ProductQueryService/List"
	ProductQueryService_ById_FullMethodName      = "/query.v1.ProductQueryService/ById"
	ProductQueryService_ByKeyword_FullMethodName = "/query.v1.ProductQueryService/ByKeyword"
)

// ProductQueryServiceClient is the client API for ProductQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductQueryServiceClient interface {
	List(ctx context.Context, in *ProductQueryServiceListRequest, opts ...grpc.CallOption) (*ProductQueryServiceListResponse, error)
	ById(ctx context.Context, in *ProductQueryServiceByIdRequest, opts ...grpc.CallOption) (*ProductQueryServiceByIdResponse, error)
	ByKeyword(ctx context.Context, in *ProductQueryServiceByKeywordRequest, opts ...grpc.CallOption) (*ProductQueryServiceByKeywordResponse, error)
}

type productQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductQueryServiceClient(cc grpc.ClientConnInterface) ProductQueryServiceClient {
	return &productQueryServiceClient{cc}
}

func (c *productQueryServiceClient) List(ctx context.Context, in *ProductQueryServiceListRequest, opts ...grpc.CallOption) (*ProductQueryServiceListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductQueryServiceListResponse)
	err := c.cc.Invoke(ctx, ProductQueryService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productQueryServiceClient) ById(ctx context.Context, in *ProductQueryServiceByIdRequest, opts ...grpc.CallOption) (*ProductQueryServiceByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductQueryServiceByIdResponse)
	err := c.cc.Invoke(ctx, ProductQueryService_ById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productQueryServiceClient) ByKeyword(ctx context.Context, in *ProductQueryServiceByKeywordRequest, opts ...grpc.CallOption) (*ProductQueryServiceByKeywordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductQueryServiceByKeywordResponse)
	err := c.cc.Invoke(ctx, ProductQueryService_ByKeyword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductQueryServiceServer is the server API for ProductQueryService service.
// All implementations must embed UnimplementedProductQueryServiceServer
// for forward compatibility.
type ProductQueryServiceServer interface {
	List(context.Context, *ProductQueryServiceListRequest) (*ProductQueryServiceListResponse, error)
	ById(context.Context, *ProductQueryServiceByIdRequest) (*ProductQueryServiceByIdResponse, error)
	ByKeyword(context.Context, *ProductQueryServiceByKeywordRequest) (*ProductQueryServiceByKeywordResponse, error)
	mustEmbedUnimplementedProductQueryServiceServer()
}

// UnimplementedProductQueryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductQueryServiceServer struct{}

func (UnimplementedProductQueryServiceServer) List(context.Context, *ProductQueryServiceListRequest) (*ProductQueryServiceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedProductQueryServiceServer) ById(context.Context, *ProductQueryServiceByIdRequest) (*ProductQueryServiceByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ById not implemented")
}
func (UnimplementedProductQueryServiceServer) ByKeyword(context.Context, *ProductQueryServiceByKeywordRequest) (*ProductQueryServiceByKeywordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ByKeyword not implemented")
}
func (UnimplementedProductQueryServiceServer) mustEmbedUnimplementedProductQueryServiceServer() {}
func (UnimplementedProductQueryServiceServer) testEmbeddedByValue()                             {}

// UnsafeProductQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductQueryServiceServer will
// result in compilation errors.
type UnsafeProductQueryServiceServer interface {
	mustEmbedUnimplementedProductQueryServiceServer()
}

func RegisterProductQueryServiceServer(s grpc.ServiceRegistrar, srv ProductQueryServiceServer) {
	// If the following call pancis, it indicates UnimplementedProductQueryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductQueryService_ServiceDesc, srv)
}

func _ProductQueryService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductQueryServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductQueryServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductQueryService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductQueryServiceServer).List(ctx, req.(*ProductQueryServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductQueryService_ById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductQueryServiceByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductQueryServiceServer).ById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductQueryService_ById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductQueryServiceServer).ById(ctx, req.(*ProductQueryServiceByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductQueryService_ByKeyword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductQueryServiceByKeywordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductQueryServiceServer).ByKeyword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductQueryService_ByKeyword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductQueryServiceServer).ByKeyword(ctx, req.(*ProductQueryServiceByKeywordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductQueryService_ServiceDesc is the grpc.ServiceDesc for ProductQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "query.v1.ProductQueryService",
	HandlerType: (*ProductQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ProductQueryService_List_Handler,
		},
		{
			MethodName: "ById",
			Handler:    _ProductQueryService_ById_Handler,
		},
		{
			MethodName: "ByKeyword",
			Handler:    _ProductQueryService_ByKeyword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "query/v1/query.proto",
}
